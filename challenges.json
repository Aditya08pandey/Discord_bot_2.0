
[
  {
    "id": 1,
    "title": "Two Sum Problem",
    "description": "Given an array of integers and a target sum, find two numbers that add up to the target. Return their indices.\n\n**Example:**\nInput: nums = [2,7,11,15], target = 9\nOutput: [0,1]\n\n**Constraints:**\n- 2 ≤ nums.length ≤ 10⁴\n- -10⁹ ≤ nums[i] ≤ 10⁹\n- -10⁹ ≤ target ≤ 10⁹",
    "difficulty": "Easy"
  },
  {
    "id": 2,
    "title": "Reverse Linked List",
    "description": "Given the head of a singly linked list, reverse the list and return the reversed list.\n\n**Example:**\nInput: head = [1,2,3,4,5]\nOutput: [5,4,3,2,1]\n\n**Follow up:** Can you solve it both iteratively and recursively?",
    "difficulty": "Easy"
  },
  {
    "id": 3,
    "title": "Binary Tree Maximum Path Sum",
    "description": "A path in a binary tree is a sequence of nodes where each pair of adjacent nodes has an edge connecting them. Find the maximum sum of any non-empty path.\n\n**Example:**\nInput: root = [1,2,3]\nOutput: 6\nExplanation: The optimal path is 2 -> 1 -> 3 with a path sum of 2 + 1 + 3 = 6.",
    "difficulty": "Hard"
  },
  {
    "id": 4,
    "title": "Valid Parentheses",
    "description": "Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\n\n**Example:**\nInput: s = \"()[]{}\"\nOutput: true\n\n**Rules:**\n1. Open brackets must be closed by the same type of brackets\n2. Open brackets must be closed in the correct order",
    "difficulty": "Easy"
  },
  {
    "id": 5,
    "title": "Longest Substring Without Repeating Characters",
    "description": "Given a string s, find the length of the longest substring without repeating characters.\n\n**Example:**\nInput: s = \"abcabcbb\"\nOutput: 3\nExplanation: The answer is \"abc\", with the length of 3.\n\n**Constraints:**\n- 0 ≤ s.length ≤ 5 * 10⁴",
    "difficulty": "Medium"
  },
  {
    "id": 6,
    "title": "Merge Intervals",
    "description": "Given an array of intervals, merge all overlapping intervals and return an array of the non-overlapping intervals.\n\n**Example:**\nInput: intervals = [[1,3],[2,6],[8,10],[15,18]]\nOutput: [[1,6],[8,10],[15,18]]\nExplanation: Since intervals [1,3] and [2,6] overlap, merge them into [1,6].",
    "difficulty": "Medium"
  },
  {
    "id": 7,
    "title": "Design LRU Cache",
    "description": "Design a data structure that follows the constraints of a Least Recently Used (LRU) cache.\n\nImplement the LRUCache class:\n- LRUCache(int capacity) Initialize with positive size capacity\n- int get(int key) Return the value of the key if exists, otherwise return -1\n- void put(int key, int value) Update the value or insert if not exists\n\nBoth operations should run in O(1) average time complexity.",
    "difficulty": "Medium"
  },
  {
    "id": 8,
    "title": "Word Ladder",
    "description": "Given two words (beginWord and endWord) and a dictionary's word list, find the length of the shortest transformation sequence from beginWord to endWord.\n\n**Rules:**\n1. Only one letter can be changed at a time\n2. Each transformed word must exist in the word list\n\n**Example:**\nInput: beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]\nOutput: 5\nExplanation: \"hit\" -> \"hot\" -> \"dot\" -> \"dog\" -> \"cog\"",
    "difficulty": "Hard"
  }
]